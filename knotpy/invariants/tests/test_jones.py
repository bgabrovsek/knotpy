from sympy import Integer, sympify, expand, simplify, symbols, Rational

from knotpy import jones_polynomial
from knotpy.algorithms.canonical import canonical

from knotpy.notation.native import from_knotpy_notation
from knotpy.notation.pd import from_pd_notation
from knotpy.catalog.graphs import theta_curve, handcuff_link
from knotpy.invariants.yamada import yamada_polynomial

def test_jones():
    """ Test the Jones polynomial with examples from KnotInfo (https://knotinfo.math.indiana.edu/)
    and LinkInfo (https://linkinfo.sitehost.iu.edu/)"""
    known_values = {
        "3_1": ("[[1,5,2,4],[3,1,4,6],[5,3,6,2]]", "t+ t^3-t^4"),
        "4_1": ("[[4,2,5,1],[8,6,1,5],[6,3,7,4],[2,7,3,8]]", "t^(-2)-t^(-1)+ 1-t+ t^2"),
        "5_1": ("[[2,8,3,7],[4,10,5,9],[6,2,7,1],[8,4,9,3],[10,6,1,5]]", "t^2+ t^4-t^5+ t^6-t^7"),
        "5_2": ("[[1,5,2,4],[3,9,4,8],[5,1,6,10],[7,3,8,2],[9,7,10,6]]", "t-t^2+ 2*t^3-t^4+ t^5-t^6"),
        "6_1": ("[[1,7,2,6],[3,10,4,11],[5,3,6,2],[7,1,8,12],[9,4,10,5],[11,9,12,8]]", "t^(-2)-t^(-1)+ 2-2*t+ t^2-t^3+ t^4"),
        "6_2": ("[[1,8,2,9],[3,11,4,10],[5,1,6,12],[7,2,8,3],[9,7,10,6],[11,5,12,4]]", "t^(-1)-1+ 2*t-2*t^2+ 2*t^3-2*t^4+ t^5"),
        "6_3": ("[[4,2,5,1],[8,4,9,3],[12,9,1,10],[10,5,11,6],[6,11,7,12],[2,8,3,7]]", "-t^(-3)+ 2*t^(-2)-2*t^(-1)+ 3-2*t+ 2*t^2-t^3"),
        "7_1": ("[[1,9,2,8],[3,11,4,10],[5,13,6,12],[7,1,8,14],[9,3,10,2],[11,5,12,4],[13,7,14,6]]", "t^3+ t^5-t^6+ t^7-t^8+ t^9-t^10"),
        "7_2": ("[[2,10,3,9],[4,14,5,13],[6,12,7,11],[8,2,9,1],[10,8,11,7],[12,6,13,5],[14,4,1,3]]", "t-t^2+ 2*t^3-2*t^4+ 2*t^5-t^6+ t^7-t^8"),
        "7_3": ("[[1,9,2,8],[3,11,4,10],[5,1,6,14],[7,13,8,12],[9,3,10,2],[11,5,12,4],[13,7,14,6]]", "t^2-t^3+ 2*t^4-2*t^5+ 3*t^6-2*t^7+ t^8-t^9"),
        "7_4": ("[[2,10,3,9],[4,12,5,11],[6,14,7,13],[8,4,9,3],[10,2,11,1],[12,8,13,7],[14,6,1,5]]", "t-2*t^2+ 3*t^3-2*t^4+ 3*t^5-2*t^6+ t^7-t^8"),
        "7_5": ("[[2,10,3,9],[4,2,5,1],[6,14,7,13],[8,12,9,11],[10,4,11,3],[12,6,13,5],[14,8,1,7]]", "t^2-t^3+ 3*t^4-3*t^5+ 3*t^6-3*t^7+ 2*t^8-t^9"),
        "7_6": ("[[1,13,2,12],[3,9,4,8],[5,1,6,14],[7,10,8,11],[9,3,10,2],[11,6,12,7],[13,5,14,4]]", "t^(-1)-2+ 3*t-3*t^2+ 4*t^3-3*t^4+ 2*t^5-t^6"),
        "7_7": ("[[1,10,2,11],[3,13,4,12],[5,14,6,1],[7,5,8,4],[9,2,10,3],[11,9,12,8],[13,6,14,7]]", "t^(-4)-2*t^(-3)+ 3*t^(-2)-4*t^(-1)+ 4-3*t+ 3*t^2-t^3"),
        #"L2a1{0}": ("[[4,1,3,2],[2,3,1,4]]", "-x^(-5)-x^(-1)"),
        #"L2a1{1}": ("[[4,2,3,1],[2,4,1,3]]", "-x-x^5"),
        # "L4a1{0}": ("[[6,1,7,2],[8,3,5,4],[2,5,3,6],[4,7,1,8]]", "-x^(-9)-x^(-5) + x^(-3)-x^(-1)"),
        # "L4a1{1}": ("[[6,2,7,1],[8,4,5,3],[2,8,3,7],[4,6,1,5]]", "-x^3-x^7 + x^9-x^11"),
        # "L5a1{0}": ("[[6,1,7,2],[10,7,5,8],[4,5,1,6],[2,10,3,9],[8,4,9,3]]", "x^(-7)-2/x^5 + x^(-3)-2/x + x-x^3"),
        # "L5a1{1}": ("[[8,2,9,1],[10,7,5,8],[4,10,1,9],[2,5,3,6],[6,3,7,4]]", "x^(-7)-2/x^5 + x^(-3)-2/x + x-x^3"),
        # "L6a1{0}": ("[[6,1,7,2],[10,3,11,4],[12,8,5,7],[8,12,9,11],[2,5,3,6],[4,9,1,10]]", "-x^(-9) + x^(-7)-3/x^5 + 2/x^3-2/x + 2*x-x^3"),
        # "L6a1{1}": ("[[10,2,11,1],[6,4,7,3],[12,10,5,9],[8,6,9,5],[2,12,3,11],[4,8,1,7]]", "-x^3 + x^5-3*x^7 + 2*x^9-2*x^11 + 2*x^13-x^15"),
        # "L6a2{0}": ("[[8,1,9,2],[12,5,7,6],[10,3,11,4],[4,11,5,12],[2,7,3,8],[6,9,1,10]]", "-x^(-15) + x^(-13)-2/x^11 + 2/x^9-2/x^7 + x^(-5)-x^(-3)"),
        # "L6a2{1}": ("[[10,2,11,1],[12,6,7,5],[8,4,9,3],[4,8,5,7],[2,12,3,11],[6,10,1,9]]", "-x^3 + x^5-2*x^7 + 2*x^9-2*x^11 + x^13-x^15"),
        # "L6a3{0}": ("[[8,1,9,2],[2,9,3,10],[10,3,11,4],[12,5,7,6],[6,7,1,8],[4,11,5,12]]", "-x^(-17) + x^(-15)-x^(-13) + x^(-11)-x^(-9)-x^(-5)"),
        # "L6a3{1}": ("[[10,2,11,1],[2,10,3,9],[8,4,9,3],[12,6,7,5],[6,12,1,11],[4,8,5,7]]", "-x + x^3-x^5 + x^7-x^9-x^13"),
        # "L6a4{0,0}": ("[[6,1,7,2],[12,8,9,7],[4,12,1,11],[10,5,11,6],[8,4,5,3],[2,9,3,10]]", "4-x^(-6) + 3/x^4-2/x^2-2*x^2 + 3*x^4-x^6"),
        # "L6a4{1,0}": ("[[6,2,7,1],[12,5,9,6],[4,12,1,11],[10,8,11,7],[8,3,5,4],[2,9,3,10]]", "4-x^(-6) + 3/x^4-2/x^2-2*x^2 + 3*x^4-x^6"),
        # "L6a4{0,1}": ("[[6,1,7,2],[12,7,9,8],[4,9,1,10],[10,6,11,5],[8,4,5,3],[2,12,3,11]]", "4-x^(-6) + 3/x^4-2/x^2-2*x^2 + 3*x^4-x^6"),
        # "L6a4{1,1}": ("[[6,2,7,1],[12,6,9,5],[4,9,1,10],[10,7,11,8],[8,3,5,4],[2,12,3,11]]", "4-x^(-6) + 3/x^4-2/x^2-2*x^2 + 3*x^4-x^6"),
        # "L6a5{0,0}": ("[[6,1,7,2],[10,3,11,4],[12,7,9,8],[8,11,5,12],[2,5,3,6],[4,9,1,10]]", "x^(-14)-x^(-12) + 3/x^10-x^(-8) + 3/x^6-2/x^4 + x^(-2)"),
        # "L6a5{1,0}": ("[[6,2,7,1],[10,3,11,4],[12,6,9,5],[8,12,5,11],[2,8,3,7],[4,9,1,10]]", "-1 + x^(-2) + 3*x^2-x^4 + 3*x^6-2*x^8 + x^10"),
        # "L6a5{0,1}": ("[[6,1,7,2],[10,4,11,3],[12,8,9,7],[8,10,5,9],[2,5,3,6],[4,12,1,11]]", "-1 + x^(-2) + 3*x^2-x^4 + 3*x^6-2*x^8 + x^10"),
        # "L6a5{1,1}": ("[[6,2,7,1],[10,4,11,3],[12,5,9,6],[8,9,5,10],[2,8,3,7],[4,12,1,11]]", "-1 + x^(-2) + 3*x^2-x^4 + 3*x^6-2*x^8 + x^10")
    }

    # TODO: does not work for links, we should convert them to oriented links as PD can also provide orientation

    x, t = symbols('x t')

    for name, (pd, expected_jones) in known_values.items():
        k = from_pd_notation(pd)
        jones = jones_polynomial(k)
        expected_jones = sympify(expected_jones)

        # if name[0] == "L":
        #     expected_jones = expand(expected_jones.subs(x, t**Rational(-1, 2)))

        # print(name)
        # print(jones)
        # print(expected_jones)
        # print("*")
        assert jones == expected_jones, f"Jones polynomial for {name} is {jones} instead of {expected_jones}"


if __name__ == '__main__':
    test_jones()